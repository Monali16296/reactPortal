===> first install node n npm

   install node from official site

  it will add npm default

  then check version by typing command node -v and npm -v

===> create react folder using cmd

 https://github.com/facebook/create-react-app

command:
  npm init react-app my-app


==> for router related package

npm i react-router-dom (i means install)

https://reacttraining.com/react-router/web/example/auth-workflow

==>react-loadable

React Loadable is a small library that makes component-centric code splitting incredibly easy in React. 
Loadable is a higher-order component (a function that creates a component) which lets you dynamically load any module
before rendering it into your app.

==>react-app-polyfill
This package includes polyfills for various browsers. It includes minimum requirements and commonly used language features used by Create React App projects.

==>react-redux
Redux?—?A complimentary library to React that provides a way to easily keep the data(State) and the events(Actions).Redux isolate state object from components.
https://medium.com/@tkssharma/understanding-redux-react-in-easiest-way-part-1-81f3209fc0e5

==>componentWillReceiveProps
https://engineering.musefind.com/react-lifecycle-methods-how-and-when-to-use-them-2111a1b692b1


==> server dependencies

= npm i --save express

= npm i --save body-parser

= npm i --save mysql

= npm i --save nodemon

==>bootstrap
npm i --save bootstrap

==>redux
Redux is used mostly for application state management. To summarize it, Redux maintains the state of an entire application in a single immutable state tree (object), which can't be changed directly. When something changes, a new object is created (using actions and reducers
for creating store, reducer

==>reducer

if don't want to mutate state directly, the mutations you want to happen with plain object called actions. For that you can write a reducer

The reducer is a pure function that takes the previous state and an action, and returns the next state

==>redux-thunk
wraps an expression to delay its evaluation

==>middleware
sits between action n reducers

==>actions
send data from your app to store

==>lazy loading
on demand loading loadable

==>componentwillmount
chance to change config value and state before rendering